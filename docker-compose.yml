version: "3.8"
services:
  app:
    build:
      context: backend
      target: prod-stage
    container_name: app
    env_file:
      - ./.env.dev
    ports:
      - "${PORT}:${PORT}"
    depends_on:
      - db
    networks:
      - db-net
#      - frontend

  frontend:
    build:
      context: frontend
      target: prod-stage
    container_name: frontend
#    environment:
#      VITE_API_URL: "http://${HOST}:${PORT}"
    ports:
      - "8080:80"
#    networks:
#      - frontend

  db:
    image: postgres:15-alpine
    container_name: db
    environment:
      POSTGRES_DB: ${POSTGRES_DB_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - ./migrations:/docker-entrypoint-initdb.d
      - db-data:/var/lib/postgresql/data
    expose:
      - ${POSTGRES_PORT}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      - db-net

#  pgadmin:
#    container_name: pgadmin_container
#    image: dpage/pgadmin4:7.4
#    environment:
#      PGADMIN_DEFAULT_EMAIL: "test@test.com"
#      PGADMIN_DEFAULT_PASSWORD: "test"
#      PGADMIN_CONFIG_SERVER_MODE: "False"
#    volumes:
#      - pgadmin-data:/var/lib/pgadmin
#    ports:
#      - "5050:80"
#    restart: unless-stopped
#    deploy:
#      resources:
#        limits:
#          cpus: '0.5'
#          memory: 1G
#    networks:
#      - db-net

networks:
  db-net:
    name: db-net
    driver: bridge

volumes:
  db-data:
  pgadmin-data:
